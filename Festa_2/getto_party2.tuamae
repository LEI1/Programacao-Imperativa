#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <limits.h>

// --------------------

// Festa da Programação
// 14 de Novembro
// Autor: Joao Andrade 
// ID Mooshak: Joao_Andrade_52495

// --------------------

int max(int x, int y)
{
  return x <= y ? y : x;
}

int min(int x, int y)
{
  return x <= y ? x : y;
}

int ints_get(int *a)
{
  int result = 0;
  int x;
  while (scanf("%d", &x) != EOF)
    a[result++] = x;
  return result;
}

void ints_println_basic(const int *a, int n)
{
  if (n > 0)
  {
    printf("%d", a[0]);
    for (int i = 1; i < n; i++)  // i = 1
      printf(" %d", a[i]);
  }
  printf("\n");
}

int ints_sum(const int *a, int n)
{
  int result = 0;
  for (int i = 0; i < n; i++)
    result += a[i];
  return result;
}

int ints_max(const int *a, int n)
{
  int result = INT_MIN;
  for (int i = 0; i < n; i++)
    if (result < a[i])
      result = a[i];
  return result;
}

int ints_min(const int *a, int n)
{
  int result = INT_MAX;
  for (int i = 0; i < n; i++)
    if (result > a[i])
      result = a[i];
  return result;
}

int ints_equal_arrays(const int *a, const int n, const int *b, int m)
{
  int result = n == m;
  int i = 0;
  while (result && i < n)
    if (a[i] != b[i])
      result = 0;
    else
      i++;
  return result;
}

// --------------------

int doubles_get(double *a)
{
  int result = 0;
  double x;
  while (scanf("%lf", &x) != EOF)
    a[result++] = x;
  return result;
}

void doubles_println_basic(const double *a, int n)
{
  if (n > 0)
  {
    printf("%g", a[0]);
    for (int i = 1; i < n; i++)  // i = 1
      printf(" %g", a[i]);
  }
  printf("\n");
}

double doubles_sum(const double *a, int n)
{
  double result = 0;
  for (int i = 0; i < n; i++)
    result += a[i];
  return result;
}

double doubles_max(const double *a, int n)
{
  double result = -INFINITY;
  for (int i = 0; i < n; i++)
    if (result < a[i])
      result = a[i];
  return result;
}

double doubles_min(const double *a, int n)
{
  double result = +INFINITY;
  for (int i = 0; i < n; i++)
    if (result > a[i])
      result = a[i];
  return result;
}

// --------------------
// Problema A

int christmas_gift(int x, int *a)
{
  int result = 0;
  int size = ints_get(a);
  for (int i = 0; i < size; i++)
    result += a[i] / x;
  return result;
}

void unit_test_problem_A(void)
{
  int arr1[6] = {7,3,2,5,6,10};
  int arr2[8] = {8,9,3,4,5,10,13,11};
  assert(christmas_gift(3,arr1) == 9);
  assert(christmas_gift(4,arr2) == 13);
}

// --------------------
// Problema B

int hattrick(const int *a, int n)
{
  int result = 0;
  for (int i = 0; i < n; i++)
    if (a[i] >= 3)
      result++;
  return result;
}

int hattrick_games(int *a, int n, int x)
{
  int result = 0; 
  int b[1000];
    for (int i = 0; i < n; i += x) 
      b[result++] = hattrick(a + i, min(x, n - i));
    ints_println_basic(b, result);
  return result; 
}

void unit_test_problem_B(void)
{
  int arr1[23] = {1,2,3,3,0,1,3,1,2,0,0,1,3,1,3,3,0,0,3,0,3,0};
  assert(hattrick(arr1, 4));
}

// --------------------
// Problema C

int gasoline(double *a, int n)
{
  int peak = -1;
  for (int i = 0; i < n-1; i++)
    if (a[i+1] > a[i])
      peak = i;
  return peak;
}

int descida(double *b, int n)
{
  int dias = -1;
  for (int i = 0; i < n-1; i++)
    if (b[i] > b[i+1])
      return i + 1;
  return dias;
}

void unit_test_problem_C(void)
{
  double arr1[16] = {1.52,1.53,1.53,1.50,1.50,1.50,1.51,1.51,1.52,1.53,1.52,1.52,1.51,1.50,1.50,1.49};
  double arr2[5] = {1,2,3,4,5};
  assert(gasoline(arr1, 16) == 5);
  assert(gasoline(arr2, 5) == -1);
}

// --------------------

void test_problem_A(void)
{
  int x;
  int arr1[1000];
  while (scanf("%d", &x) !=EOF)
  {
    printf("%d\n", christmas_gift(x,arr1));
  }
}

void test_problem_B(void)
{
  int arr1[1000];
  int x;
  scanf("%d\n", &x);
  int n = ints_get(arr1);
  hattrick_games(arr1, n, x);
}

void test_problem_C(void)
{
  double arr1[1000];
  int n = doubles_get(arr1);
  int y = gasoline(arr1, n);
    if (y == -1)
      printf("void\n");
    else 
    {
      int x = descida(arr1+y, n-y);
      if (x == -1)
        printf("void\n");
      else
        printf("%d\n", n-y-x-1);
    }
}

void unit_tests(void)
{
  unit_test_problem_A();
  unit_test_problem_B();
  unit_test_problem_C();
}

// --------------------

int main(void)
{
// unit_tests();
// test_problem_A();
// test_problem_B();
  test_problem_C();
  return 0;
}
